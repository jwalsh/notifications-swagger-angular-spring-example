/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ISEError;
import io.swagger.model.ModelError;
import io.swagger.model.Notification;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-09-27T16:33:35.088-04:00")

@Api(value = "notifications", description = "the notifications API")
public interface NotificationsApi {

    @ApiOperation(value = "Get all notifications allowed for a user", notes = "", response = Notification.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Notification.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "User role prohibits access", response = ModelError.class),
        @ApiResponse(code = 500, message = "Invalid token", response = ModelError.class) })
    
    @RequestMapping(value = "/notifications",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Notification>> notificationsGet();


    @ApiOperation(value = "Get a single notifcation", notes = "Get an action ", response = Notification.class, authorizations = {
        @Authorization(value = "JWT")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Notification.class),
        @ApiResponse(code = 405, message = "User role prohibits access", response = ModelError.class),
        @ApiResponse(code = 500, message = "Invalid token", response = ISEError.class) })
    
    @RequestMapping(value = "/notifications/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Notification> notificationsIdGet( @Min(1)@ApiParam(value = "the target notification",required=true ) @PathVariable("id") Long id);


    @ApiOperation(value = "Update action", notes = "Update an action ", response = Notification.class, authorizations = {
        @Authorization(value = "JWT")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Notification.class),
        @ApiResponse(code = 405, message = "User role prohibits access", response = ModelError.class),
        @ApiResponse(code = 500, message = "Invalid token", response = ISEError.class) })
    
    @RequestMapping(value = "/notifications/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Notification> notificationsIdPut( @Min(1)@ApiParam(value = "the target notification",required=true ) @PathVariable("id") Long id,@ApiParam(value = ""  )  @Valid @RequestBody Notification body);

}
